<?xml version="1.0" encoding="utf-8"?>
<rss version="2.0"
  xmlns:atom="http://www.w3.org/2005/Atom"
  xmlns:content="http://purl.org/rss/1.0/modules/content/">
  <channel>
    <title>JH&#39;s dev blog</title>
    <link>https://juhyeong-k.github.io/</link>
    
    <atom:link href="https://juhyeong-k.github.io/rss2.xml" rel="self" type="application/rss+xml"/>
    
    <description>All about dev</description>
    <pubDate>Sat, 20 Feb 2021 14:06:09 GMT</pubDate>
    <generator>http://hexo.io/</generator>
    
    <item>
      <title>20210220 TIL</title>
      <link>https://juhyeong-k.github.io/2021/02/20/20210220-TIL/</link>
      <guid>https://juhyeong-k.github.io/2021/02/20/20210220-TIL/</guid>
      <pubDate>Sat, 20 Feb 2021 14:04:19 GMT</pubDate>
      
        
        
      <description>&lt;h1 id=&quot;Elevator-class-practice&quot;&gt;&lt;a href=&quot;#Elevator-class-practice&quot; class=&quot;headerlink&quot; title=&quot;Elevator class practice&quot;&gt;&lt;/a&gt;Elevator class pr</description>
        
      
      
      
      <content:encoded><![CDATA[<h1 id="Elevator-class-practice"><a href="#Elevator-class-practice" class="headerlink" title="Elevator class practice"></a>Elevator class practice</h1><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> abc <span class="keyword">import</span> ABC, abstractmethod</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Elevators</span>(<span class="params">ABC</span>):</span></span><br><span class="line"></span><br><span class="line"><span class="meta">    @abstractmethod</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">get_min_max</span>(<span class="params">self</span>):</span></span><br><span class="line">        <span class="keyword">pass</span></span><br><span class="line"></span><br><span class="line"><span class="meta">    @abstractmethod</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">move_up</span>(<span class="params">self</span>):</span></span><br><span class="line">        <span class="keyword">pass</span></span><br><span class="line"></span><br><span class="line"><span class="meta">    @abstractmethod</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">move_down</span>(<span class="params">self</span>):</span></span><br><span class="line">        <span class="keyword">pass</span></span><br><span class="line"></span><br><span class="line"><span class="meta">    @abstractmethod</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">move_to_passenger1</span>(<span class="params">self</span>):</span></span><br><span class="line">        <span class="keyword">pass</span></span><br><span class="line"></span><br><span class="line"><span class="meta">    @abstractmethod</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">move_to_passenger2</span>(<span class="params">self</span>):</span></span><br><span class="line">        <span class="keyword">pass</span></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Elevator</span>(<span class="params">Elevators</span>):</span></span><br><span class="line">    </span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span>(<span class="params">self,current_floor=<span class="number">1</span></span>):</span></span><br><span class="line">        self.passengers = passengers</span><br><span class="line">        <span class="comment"># 엘리베이터를 이용하는 승객</span></span><br><span class="line">        self.current_floor = current_floor</span><br><span class="line">        <span class="comment"># 엘리베이터 현재 층</span></span><br><span class="line">        self.move_counts = <span class="number">0</span></span><br><span class="line">        <span class="comment"># 엘리베이터 누적 층 수</span></span><br><span class="line">        </span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">get_min_max</span>(<span class="params">self, passengers</span>):</span></span><br><span class="line">        <span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="string">        올라가고 내려가는 승객들 중 최소 층과 최대 층을 구한다</span></span><br><span class="line"><span class="string">        &quot;&quot;&quot;</span></span><br><span class="line">        in_f = []</span><br><span class="line">        out_f = []</span><br><span class="line">        <span class="keyword">for</span> a, b <span class="keyword">in</span> passengers:</span><br><span class="line">            in_f.append(a)</span><br><span class="line">            out_f.append(b)</span><br><span class="line">        <span class="keyword">if</span> a &gt; b:</span><br><span class="line">            self.in_floor = <span class="built_in">max</span>(in_f)</span><br><span class="line">            self.out_floor = <span class="built_in">min</span>(out_f)</span><br><span class="line">            print(<span class="string">f&quot;start: <span class="subst">&#123;self.in_floor&#125;</span> end: <span class="subst">&#123;self.out_floor&#125;</span>&quot;</span>)  </span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            self.in_floor = <span class="built_in">min</span>(in_f)</span><br><span class="line">            self.out_floor = <span class="built_in">max</span>(out_f)</span><br><span class="line">            print(<span class="string">f&quot;start: <span class="subst">&#123;self.in_floor&#125;</span> end: <span class="subst">&#123;self.out_floor&#125;</span>&quot;</span>)  </span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">move_up</span>(<span class="params">self</span>):</span></span><br><span class="line">        <span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="string">        엘리베이터가 올라가면서 이동한 층들을 move_counts에 누적</span></span><br><span class="line"><span class="string">        승객이 내린 층을 현재 엘리베이터의 층으로 변경</span></span><br><span class="line"><span class="string">        &quot;&quot;&quot;</span></span><br><span class="line">        self.move_counts += self.out_floor - self.in_floor</span><br><span class="line">        self.current_floor = self.out_floor</span><br><span class="line">        print(<span class="string">f&quot;move_counts: <span class="subst">&#123;self.move_counts&#125;</span>, current_floor: <span class="subst">&#123;self.current_floor&#125;</span>&quot;</span>)</span><br><span class="line">        </span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">move_down</span>(<span class="params">self</span>):</span></span><br><span class="line">        <span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="string">        엘리베이터가 내려가면서 이동한 층들을 move_counts에 누적</span></span><br><span class="line"><span class="string">        승객이 내린 층을 현재 엘리베이터의 층으로 변경</span></span><br><span class="line"><span class="string">        &quot;&quot;&quot;</span></span><br><span class="line">        self.move_counts += self.in_floor - self.out_floor</span><br><span class="line">        self.current_floor = self.out_floor</span><br><span class="line">        print(<span class="string">f&quot;move_counts: <span class="subst">&#123;self.move_counts&#125;</span>, current_floor: <span class="subst">&#123;self.current_floor&#125;</span>&quot;</span>)</span><br><span class="line">        </span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">move_to_passenger1</span>(<span class="params">self</span>):</span></span><br><span class="line">        <span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="string">        올라가는 엘리베이터가 승객의 층까지 이동한 층들을 move_counts에 누적</span></span><br><span class="line"><span class="string">        &quot;&quot;&quot;</span></span><br><span class="line">        self.move_counts += <span class="built_in">abs</span>(self.current_floor - self.in_floor)       </span><br><span class="line">        print(<span class="string">f&quot;move to passenger: current:<span class="subst">&#123;self.current_floor&#125;</span>-&gt;passenger:<span class="subst">&#123;self.in_floor&#125;</span>&quot;</span>)</span><br><span class="line">        </span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">move_to_passenger2</span>(<span class="params">self</span>):</span></span><br><span class="line">        <span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="string">        내려가는 엘리베이터가 승객의 층까지 이동한 층들을 move_counts에 누적</span></span><br><span class="line"><span class="string">        &quot;&quot;&quot;</span></span><br><span class="line">        self.move_counts += <span class="built_in">abs</span>(self.current_floor - self.in_floor)        </span><br><span class="line">        print(<span class="string">f&quot;move to passenger: currnet:<span class="subst">&#123;self.current_floor&#125;</span>-&gt;passenger:<span class="subst">&#123;self.in_floor&#125;</span>&quot;</span>)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment"># 엘리베이터 구현</span></span><br><span class="line">passengers = [(<span class="number">6</span>, <span class="number">12</span>), (<span class="number">4</span>, <span class="number">13</span>), (<span class="number">11</span>, <span class="number">3</span>), (<span class="number">9</span>, <span class="number">2</span>), (<span class="number">11</span>, <span class="number">12</span>), (<span class="number">3</span>, <span class="number">9</span>), (<span class="number">14</span>, <span class="number">8</span>), (<span class="number">1</span>, <span class="number">7</span>), (<span class="number">11</span>, <span class="number">9</span>), (<span class="number">14</span>, <span class="number">16</span>), (<span class="number">2</span>, <span class="number">15</span>), (<span class="number">2</span>, <span class="number">9</span>), (<span class="number">8</span>, <span class="number">16</span>), (<span class="number">8</span>, <span class="number">9</span>), (<span class="number">3</span>, <span class="number">10</span>), (<span class="number">5</span>, <span class="number">4</span>), (<span class="number">13</span>, <span class="number">9</span>), (<span class="number">4</span>, <span class="number">6</span>), (<span class="number">13</span>, <span class="number">7</span>), (<span class="number">4</span>, <span class="number">8</span>), (<span class="number">5</span>, <span class="number">3</span>), (<span class="number">12</span>, <span class="number">14</span>), (<span class="number">10</span>, <span class="number">13</span>), (<span class="number">6</span>, <span class="number">12</span>), (<span class="number">1</span>, <span class="number">7</span>), (<span class="number">9</span>, <span class="number">2</span>), (<span class="number">13</span>, <span class="number">11</span>), (<span class="number">1</span>, <span class="number">14</span>), (<span class="number">11</span>, <span class="number">8</span>), (<span class="number">15</span>, <span class="number">12</span>), (<span class="number">3</span>, <span class="number">15</span>), (<span class="number">10</span>, <span class="number">3</span>), (<span class="number">4</span>, <span class="number">1</span>), (<span class="number">7</span>, <span class="number">1</span>), (<span class="number">15</span>, <span class="number">8</span>), (<span class="number">10</span>, <span class="number">16</span>), (<span class="number">9</span>, <span class="number">3</span>), (<span class="number">14</span>, <span class="number">13</span>), (<span class="number">8</span>, <span class="number">13</span>), (<span class="number">16</span>, <span class="number">9</span>), (<span class="number">10</span>, <span class="number">7</span>), (<span class="number">1</span>, <span class="number">6</span>), (<span class="number">16</span>, <span class="number">13</span>), (<span class="number">5</span>, <span class="number">3</span>), (<span class="number">1</span>, <span class="number">12</span>), (<span class="number">1</span>, <span class="number">7</span>), (<span class="number">12</span>, <span class="number">3</span>), (<span class="number">13</span>, <span class="number">6</span>), (<span class="number">12</span>, <span class="number">15</span>), (<span class="number">15</span>, <span class="number">6</span>)]</span><br><span class="line"></span><br><span class="line">e1 = Elevator()</span><br><span class="line">e2 = Elevator()</span><br><span class="line"></span><br><span class="line"><span class="keyword">while</span> <span class="built_in">len</span>(passengers) &gt; <span class="number">0</span>:</span><br><span class="line">    up_passengers = [person <span class="keyword">for</span> person <span class="keyword">in</span> passengers[:<span class="number">10</span>] <span class="keyword">if</span> person[<span class="number">0</span>] &lt; person[<span class="number">1</span>]]</span><br><span class="line">    down_passengers = [person <span class="keyword">for</span> person <span class="keyword">in</span> passengers[:<span class="number">10</span>] <span class="keyword">if</span> person[<span class="number">0</span>] &gt; person[<span class="number">1</span>]]</span><br><span class="line">    print(up_passengers)</span><br><span class="line">    print(down_passengers)</span><br><span class="line">    e1.get_min_max(up_passengers)</span><br><span class="line">    e2.get_min_max(down_passengers)</span><br><span class="line">    e1.move_to_passenger1()</span><br><span class="line">    e2.move_to_passenger2()</span><br><span class="line">    e1.move_up()</span><br><span class="line">    e2.move_down()</span><br><span class="line">    print(<span class="string">&quot;\n&quot;</span>)</span><br><span class="line">    passengers = passengers[<span class="number">10</span>:]</span><br><span class="line">print(<span class="string">f&quot;elevator&#x27;s total move: <span class="subst">&#123;e1.move_counts + e2.move_counts&#125;</span>&quot;</span>)</span><br></pre></td></tr></table></figure>]]></content:encoded>
      
      
      <category domain="https://juhyeong-k.github.io/categories/TIL/">TIL</category>
      
      
      <category domain="https://juhyeong-k.github.io/tags/TIL/">TIL</category>
      
      
      <comments>https://juhyeong-k.github.io/2021/02/20/20210220-TIL/#disqus_thread</comments>
      
    </item>
    
    <item>
      <title>20210219 TIL</title>
      <link>https://juhyeong-k.github.io/2021/02/19/20210219-TIL/</link>
      <guid>https://juhyeong-k.github.io/2021/02/19/20210219-TIL/</guid>
      <pubDate>Fri, 19 Feb 2021 12:03:44 GMT</pubDate>
      
        
        
      <description>&lt;h1 id=&quot;오늘-한-일&quot;&gt;&lt;a href=&quot;#오늘-한-일&quot; class=&quot;headerlink&quot; title=&quot;오늘 한 일&quot;&gt;&lt;/a&gt;오늘 한 일&lt;/h1&gt;&lt;ul&gt;
&lt;li&gt;엘리베이터 시스템 클래스 구현 연습&lt;/li&gt;
&lt;li&gt;파이썬 강의 복습&lt;/li&gt;
&lt;li&gt;</description>
        
      
      
      
      <content:encoded><![CDATA[<h1 id="오늘-한-일"><a href="#오늘-한-일" class="headerlink" title="오늘 한 일"></a>오늘 한 일</h1><ul><li>엘리베이터 시스템 클래스 구현 연습</li><li>파이썬 강의 복습</li><li>[HackerRank] Day 14 문제 풀이</li></ul><h1 id="내일-할-일"><a href="#내일-할-일" class="headerlink" title="내일 할 일"></a>내일 할 일</h1><ul><li>파이썬 과제 제출</li></ul>]]></content:encoded>
      
      
      <category domain="https://juhyeong-k.github.io/categories/TIL/">TIL</category>
      
      
      <category domain="https://juhyeong-k.github.io/tags/TIL/">TIL</category>
      
      
      <comments>https://juhyeong-k.github.io/2021/02/19/20210219-TIL/#disqus_thread</comments>
      
    </item>
    
    <item>
      <title>20210218 TIL</title>
      <link>https://juhyeong-k.github.io/2021/02/18/20210218-TIL/</link>
      <guid>https://juhyeong-k.github.io/2021/02/18/20210218-TIL/</guid>
      <pubDate>Thu, 18 Feb 2021 12:39:16 GMT</pubDate>
      
        
        
      <description>&lt;h1 id=&quot;오늘-한-일&quot;&gt;&lt;a href=&quot;#오늘-한-일&quot; class=&quot;headerlink&quot; title=&quot;오늘 한 일&quot;&gt;&lt;/a&gt;오늘 한 일&lt;/h1&gt;&lt;ul&gt;
&lt;li&gt;터미널 개발 환경 설정&lt;/li&gt;
&lt;li&gt;requests, beautifulsoup 활용</description>
        
      
      
      
      <content:encoded><![CDATA[<h1 id="오늘-한-일"><a href="#오늘-한-일" class="headerlink" title="오늘 한 일"></a>오늘 한 일</h1><ul><li>터미널 개발 환경 설정</li><li>requests, beautifulsoup 활용하는 과제 풀이</li></ul><h1 id="내일-할-일"><a href="#내일-할-일" class="headerlink" title="내일 할 일"></a>내일 할 일</h1><ul><li>파이썬 강의 복습</li><li>[HackerRank] Day 14 문제 풀이</li></ul>]]></content:encoded>
      
      
      <category domain="https://juhyeong-k.github.io/categories/TIL/">TIL</category>
      
      
      <category domain="https://juhyeong-k.github.io/tags/TIL/">TIL</category>
      
      
      <comments>https://juhyeong-k.github.io/2021/02/18/20210218-TIL/#disqus_thread</comments>
      
    </item>
    
    <item>
      <title>20210217 TIL</title>
      <link>https://juhyeong-k.github.io/2021/02/17/20210217-TIL/</link>
      <guid>https://juhyeong-k.github.io/2021/02/17/20210217-TIL/</guid>
      <pubDate>Wed, 17 Feb 2021 10:44:01 GMT</pubDate>
      
        
        
      <description>&lt;h1 id=&quot;오늘-한-일&quot;&gt;&lt;a href=&quot;#오늘-한-일&quot; class=&quot;headerlink&quot; title=&quot;오늘 한 일&quot;&gt;&lt;/a&gt;오늘 한 일&lt;/h1&gt;&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;https://juhyeong-k.github.io/2021/02/16</description>
        
      
      
      
      <content:encoded><![CDATA[<h1 id="오늘-한-일"><a href="#오늘-한-일" class="headerlink" title="오늘 한 일"></a>오늘 한 일</h1><ul><li><a href="https://juhyeong-k.github.io/2021/02/16/decorator-practice/">decorator practice</a> 내용 추가</li><li><a href="https://juhyeong-k.github.io/2021/02/15/pyenv-virtualenv-poetry-autoenv-%EC%84%A4%EC%B9%98-%EB%B0%A9%EB%B2%95-%EC%A0%95%EB%A6%AC/">pyenv virtualenv poetry autoenv</a> 내용 추가</li><li>[HackerRank]Day 11 풀이</li><li>파이썬 강의 내용 복습</li></ul><h1 id="내일-할-일"><a href="#내일-할-일" class="headerlink" title="내일 할 일"></a>내일 할 일</h1><ul><li>requests, beautifulsoup 활용하는 과제 풀이</li></ul>]]></content:encoded>
      
      
      <category domain="https://juhyeong-k.github.io/categories/TIL/">TIL</category>
      
      
      <category domain="https://juhyeong-k.github.io/tags/TIL/">TIL</category>
      
      
      <comments>https://juhyeong-k.github.io/2021/02/17/20210217-TIL/#disqus_thread</comments>
      
    </item>
    
    <item>
      <title>[HackerRank]Day 11: 2D Arrays</title>
      <link>https://juhyeong-k.github.io/2021/02/17/HackerRank-Day-11-2D-Arrays/</link>
      <guid>https://juhyeong-k.github.io/2021/02/17/HackerRank-Day-11-2D-Arrays/</guid>
      <pubDate>Wed, 17 Feb 2021 10:40:42 GMT</pubDate>
      
        
        
      <description>&lt;h1 id=&quot;Day-11-2D-Arrays&quot;&gt;&lt;a href=&quot;#Day-11-2D-Arrays&quot; class=&quot;headerlink&quot; title=&quot;Day 11: 2D Arrays&quot;&gt;&lt;/a&gt;Day 11: 2D Arrays&lt;/h1&gt;&lt;figure class=&quot;</description>
        
      
      
      
      <content:encoded><![CDATA[<h1 id="Day-11-2D-Arrays"><a href="#Day-11-2D-Arrays" class="headerlink" title="Day 11: 2D Arrays"></a>Day 11: 2D Arrays</h1><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">arr = []</span><br><span class="line"><span class="keyword">for</span> _ <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">6</span>):</span><br><span class="line">    arr.append(<span class="built_in">list</span>(<span class="built_in">map</span>(<span class="built_in">int</span>, <span class="built_in">input</span>().rstrip().split())))</span><br><span class="line"></span><br><span class="line">total_sum_list = []</span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">0</span>, <span class="number">4</span>):</span><br><span class="line">    <span class="keyword">for</span> k <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">0</span>, <span class="number">4</span>):</span><br><span class="line">        total_sum = <span class="built_in">sum</span>(arr[<span class="number">0</span>+i][k:k+<span class="number">3</span>]) + (arr[<span class="number">1</span>+i][k+<span class="number">1</span>]) + <span class="built_in">sum</span>(arr[<span class="number">2</span>+i][k:k+<span class="number">3</span>])</span><br><span class="line">        total_sum_list.append(total_sum)</span><br><span class="line">print(<span class="built_in">max</span>(total_sum_list))</span><br></pre></td></tr></table></figure>]]></content:encoded>
      
      
      <category domain="https://juhyeong-k.github.io/categories/HackerRank/">HackerRank</category>
      
      
      <category domain="https://juhyeong-k.github.io/tags/HackerRank/">HackerRank</category>
      
      
      <comments>https://juhyeong-k.github.io/2021/02/17/HackerRank-Day-11-2D-Arrays/#disqus_thread</comments>
      
    </item>
    
    <item>
      <title>20210216 TIL</title>
      <link>https://juhyeong-k.github.io/2021/02/16/20210216-TIL/</link>
      <guid>https://juhyeong-k.github.io/2021/02/16/20210216-TIL/</guid>
      <pubDate>Tue, 16 Feb 2021 12:15:19 GMT</pubDate>
      
        
        
      <description>&lt;h1 id=&quot;오늘-한-일&quot;&gt;&lt;a href=&quot;#오늘-한-일&quot; class=&quot;headerlink&quot; title=&quot;오늘 한 일&quot;&gt;&lt;/a&gt;오늘 한 일&lt;/h1&gt;&lt;ul&gt;
&lt;li&gt;[HackerRank] Day 10 풀이&lt;/li&gt;
&lt;li&gt;pyenv, virtualen</description>
        
      
      
      
      <content:encoded><![CDATA[<h1 id="오늘-한-일"><a href="#오늘-한-일" class="headerlink" title="오늘 한 일"></a>오늘 한 일</h1><ul><li>[HackerRank] Day 10 풀이</li><li>pyenv, virtualenv, poetry, autoenv 설치 글 작성</li><li>Decorator practice 문제 풀이</li></ul><h1 id="내일-할-일"><a href="#내일-할-일" class="headerlink" title="내일 할 일"></a>내일 할 일</h1><ul><li> 파이썬 강의 내용 복습</li><li>[HackerRank] Day 11 풀이</li></ul>]]></content:encoded>
      
      
      <category domain="https://juhyeong-k.github.io/categories/TIL/">TIL</category>
      
      
      <category domain="https://juhyeong-k.github.io/tags/TIL/">TIL</category>
      
      
      <comments>https://juhyeong-k.github.io/2021/02/16/20210216-TIL/#disqus_thread</comments>
      
    </item>
    
    <item>
      <title>decorator practice</title>
      <link>https://juhyeong-k.github.io/2021/02/16/decorator-practice/</link>
      <guid>https://juhyeong-k.github.io/2021/02/16/decorator-practice/</guid>
      <pubDate>Tue, 16 Feb 2021 12:03:40 GMT</pubDate>
      
        
        
      <description>&lt;h1 id=&quot;Decorator-practice&quot;&gt;&lt;a href=&quot;#Decorator-practice&quot; class=&quot;headerlink&quot; title=&quot;Decorator practice&quot;&gt;&lt;/a&gt;Decorator practice&lt;/h1&gt;&lt;blockquo</description>
        
      
      
      
      <content:encoded><![CDATA[<h1 id="Decorator-practice"><a href="#Decorator-practice" class="headerlink" title="Decorator practice"></a>Decorator practice</h1><blockquote><blockquote><p>“Hi, {name}. You might be loved with {lang}” 이라는 문자열이 존재할 때,<br>이 문자열의 앞 뒤로 <code>&lt;h1&gt;</code>, <code>&lt;em&gt;</code> 태그가 붙도록 하는 데코레이터를 생성하세요</p></blockquote></blockquote><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># decorator 2개 사용</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">get_tag_em</span>(<span class="params">func</span>):</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">wrapper</span>(<span class="params">name, lang</span>):</span></span><br><span class="line">        <span class="keyword">return</span> <span class="string">f&quot;&lt;em&gt; <span class="subst">&#123;func(name, lang)&#125;</span> &lt;/em&gt;&quot;</span></span><br><span class="line">    <span class="keyword">return</span> wrapper</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">get_tag_h1</span>(<span class="params">func</span>):</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">wrapper</span>(<span class="params">name, lang</span>):</span></span><br><span class="line">        <span class="keyword">return</span> <span class="string">f&quot;&lt;h1&gt; <span class="subst">&#123;func(name, lang)&#125;</span> &lt;/h1&gt;&quot;</span></span><br><span class="line">    <span class="keyword">return</span> wrapper</span><br><span class="line"></span><br><span class="line"><span class="meta">@get_tag_h1</span></span><br><span class="line"><span class="meta">@get_tag_em</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">print_msg</span>(<span class="params">name, lang</span>):</span></span><br><span class="line">    <span class="keyword">return</span> <span class="string">f&quot;Hi, <span class="subst">&#123;name&#125;</span>, You might be loved with <span class="subst">&#123;lang&#125;</span>&quot;</span></span><br><span class="line">print(print_msg(<span class="string">&#x27;JH&#x27;</span>, <span class="string">&#x27;Python&#x27;</span>))</span><br><span class="line"><span class="string">&quot;&quot;&quot;out:</span></span><br><span class="line"><span class="string">&lt;h1&gt; &lt;em&gt; Hi, JH, You might be loved with Python &lt;/em&gt; &lt;/h1&gt;</span></span><br><span class="line"><span class="string">&quot;&quot;&quot;</span></span><br></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># decorator 1개 사용</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">get_tag_h1_em</span>(<span class="params">func</span>):</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">wrapper</span>(<span class="params">name, lang</span>):</span></span><br><span class="line">        <span class="keyword">return</span> <span class="string">f&quot;&lt;h1&gt;&lt;em&gt; <span class="subst">&#123;func(name, lang)&#125;</span> &lt;/em&gt;&lt;/h1&gt;&quot;</span></span><br><span class="line">    <span class="keyword">return</span> wrapper</span><br><span class="line"></span><br><span class="line"><span class="meta">@get_tag_h1_em</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">print_msg</span>(<span class="params">name, lang</span>):</span></span><br><span class="line">    <span class="keyword">return</span> <span class="string">f&quot;Hi, <span class="subst">&#123;name&#125;</span>, You might be loved with <span class="subst">&#123;lang&#125;</span>&quot;</span></span><br><span class="line">print(print_msg(<span class="string">&#x27;JH&#x27;</span>, <span class="string">&#x27;Python&#x27;</span>))</span><br><span class="line"></span><br><span class="line"><span class="string">&quot;&quot;&quot;out:</span></span><br><span class="line"><span class="string">&lt;h1&gt;&lt;em&gt; Hi, JH, You might be loved with Python &lt;/em&gt;&lt;/h1&gt;</span></span><br><span class="line"><span class="string">&quot;&quot;&quot;</span></span><br></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># decorator 1개 사용 + tag값 입력</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">get_tag_h1_em</span>(<span class="params">func</span>):</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">wrapper</span>(<span class="params">name, lang, tag1, tag2</span>):</span></span><br><span class="line">        <span class="keyword">return</span> <span class="string">f&quot;&lt;<span class="subst">&#123;tag1&#125;</span>&gt;&lt;<span class="subst">&#123;tag2&#125;</span>&gt; <span class="subst">&#123;func(name, lang, tag1, tag2)&#125;</span> &lt;/<span class="subst">&#123;tag2&#125;</span>&gt;&lt;/<span class="subst">&#123;tag1&#125;</span>&gt;&quot;</span></span><br><span class="line">    <span class="keyword">return</span> wrapper</span><br><span class="line"></span><br><span class="line"><span class="meta">@get_tag_h1_em</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">print_msg</span>(<span class="params">name, lang, tag1, tag2</span>):</span></span><br><span class="line">    <span class="keyword">return</span> <span class="string">f&quot;Hi, <span class="subst">&#123;name&#125;</span>, You might be loved with <span class="subst">&#123;lang&#125;</span>&quot;</span></span><br><span class="line">print(print_msg(<span class="string">&#x27;JH&#x27;</span>, <span class="string">&#x27;Python&#x27;</span>, <span class="string">&#x27;h2&#x27;</span>, <span class="string">&#x27;strong&#x27;</span>))</span><br><span class="line"></span><br><span class="line"><span class="comment"># 이렇게 하면 데코레이터를 사용하는 의미가 없는 것 같은데...</span></span><br></pre></td></tr></table></figure><hr><p>-20.02.17 내용 추가-<br>오늘 강사님이 <code>decorator</code>안에 parameter를 넣을 수 있다고 해서 찾아보고 이 문제에 적용해봤다.</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">deco_input</span>(<span class="params">tag1, tag2</span>):</span> <span class="comment"># 데코레이터에 파라미터를 넣어주기 위한 함수</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">get_tag_h1_em</span>(<span class="params">func</span>):</span></span><br><span class="line">        <span class="function"><span class="keyword">def</span> <span class="title">wrapper</span>(<span class="params">name, lang</span>):</span></span><br><span class="line">            <span class="keyword">return</span> <span class="string">f&quot;&lt;<span class="subst">&#123;tag2&#125;</span>&gt;&lt;<span class="subst">&#123;tag1&#125;</span>&gt; <span class="subst">&#123;func(name, lang)&#125;</span> &lt;/<span class="subst">&#123;tag1&#125;</span>&gt;&lt;/<span class="subst">&#123;tag2&#125;</span>&gt;&quot;</span></span><br><span class="line">        <span class="keyword">return</span> wrapper</span><br><span class="line">    <span class="keyword">return</span> get_tag_h1_em <span class="comment"># 데코레이터가 get_tag_h1_em에서 deco_input으로 바뀌기 때문에</span></span><br><span class="line">                         <span class="comment"># get_tag_h1_em을 리턴해줬다. </span></span><br><span class="line"></span><br><span class="line"><span class="meta">@deco_input(<span class="params"><span class="string">&#x27;h1&#x27;</span>, <span class="string">&#x27;em&#x27;</span></span>) </span><span class="comment"># 데코레이터 안에 파라미터 추가</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">print_msg</span>(<span class="params">name, lang</span>):</span></span><br><span class="line">    <span class="keyword">return</span> <span class="string">f&quot;Hi, <span class="subst">&#123;name&#125;</span>, You might be loved with <span class="subst">&#123;lang&#125;</span>&quot;</span></span><br><span class="line"></span><br><span class="line">print(print_msg(<span class="string">&#x27;JH&#x27;</span>, <span class="string">&#x27;Python&#x27;</span>))</span><br><span class="line"></span><br><span class="line"><span class="string">&quot;&quot;&quot;out:</span></span><br><span class="line"><span class="string">&lt;h2&gt;&lt;strong&gt; Hi, JH, You might be loved with Python &lt;/strong&gt;&lt;/h2&gt;</span></span><br><span class="line"><span class="string">&quot;&quot;&quot;</span></span><br></pre></td></tr></table></figure>]]></content:encoded>
      
      
      <category domain="https://juhyeong-k.github.io/categories/python/">python</category>
      
      
      <category domain="https://juhyeong-k.github.io/tags/python/">python</category>
      
      
      <comments>https://juhyeong-k.github.io/2021/02/16/decorator-practice/#disqus_thread</comments>
      
    </item>
    
    <item>
      <title>20210215 TIL</title>
      <link>https://juhyeong-k.github.io/2021/02/15/20210215-TIL/</link>
      <guid>https://juhyeong-k.github.io/2021/02/15/20210215-TIL/</guid>
      <pubDate>Mon, 15 Feb 2021 14:43:36 GMT</pubDate>
      
        
        
      <description>&lt;h1 id=&quot;오늘-한-일&quot;&gt;&lt;a href=&quot;#오늘-한-일&quot; class=&quot;headerlink&quot; title=&quot;오늘 한 일&quot;&gt;&lt;/a&gt;오늘 한 일&lt;/h1&gt;&lt;ul&gt;
&lt;li&gt;파이썬 강의 내용 복습&lt;/li&gt;
&lt;li&gt;[HackerRank] Day 9 풀이&lt;/li&gt;</description>
        
      
      
      
      <content:encoded><![CDATA[<h1 id="오늘-한-일"><a href="#오늘-한-일" class="headerlink" title="오늘 한 일"></a>오늘 한 일</h1><ul><li>파이썬 강의 내용 복습</li><li>[HackerRank] Day 9 풀이</li><li>pyenv에서 system을 찾지 못하는 현상 글 작성</li></ul><h1 id="내일-할-일"><a href="#내일-할-일" class="headerlink" title="내일 할 일"></a>내일 할 일</h1><ul><li>[HackerRank] Day 10 풀이</li><li>pyenv, virtualenv, poetry 설치 정리해서 글 작성</li><li>파이썬 Decorator 문제 풀이</li></ul>]]></content:encoded>
      
      
      <category domain="https://juhyeong-k.github.io/categories/TIL/">TIL</category>
      
      
      <category domain="https://juhyeong-k.github.io/tags/TIL/">TIL</category>
      
      
      <comments>https://juhyeong-k.github.io/2021/02/15/20210215-TIL/#disqus_thread</comments>
      
    </item>
    
    <item>
      <title>pyenv virtualenv poetry autoenv 설치 방법 정리</title>
      <link>https://juhyeong-k.github.io/2021/02/15/pyenv-virtualenv-poetry-autoenv-%EC%84%A4%EC%B9%98-%EB%B0%A9%EB%B2%95-%EC%A0%95%EB%A6%AC/</link>
      <guid>https://juhyeong-k.github.io/2021/02/15/pyenv-virtualenv-poetry-autoenv-%EC%84%A4%EC%B9%98-%EB%B0%A9%EB%B2%95-%EC%A0%95%EB%A6%AC/</guid>
      <pubDate>Mon, 15 Feb 2021 11:43:52 GMT</pubDate>
      
        
        
      <description>&lt;p&gt;이 글은 &lt;code&gt;Ubuntu 20.04LTS&lt;/code&gt; 기준으로 작성되었습니다.&lt;/p&gt;
&lt;h1 id=&quot;pyenv-Installation&quot;&gt;&lt;a href=&quot;#pyenv-Installation&quot; class=&quot;headerlink&quot; title=&quot;p</description>
        
      
      
      
      <content:encoded><![CDATA[<p>이 글은 <code>Ubuntu 20.04LTS</code> 기준으로 작성되었습니다.</p><h1 id="pyenv-Installation"><a href="#pyenv-Installation" class="headerlink" title="pyenv Installation"></a>pyenv Installation</h1><p><a href="https://github.com/pyenv/pyenv">https://github.com/pyenv/pyenv</a></p><ol><li>git clone<figure class="highlight zsh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git <span class="built_in">clone</span> https://github.com/pyenv/pyenv.git ~/.pyenv</span><br></pre></td></tr></table></figure></li><li>환경변수 설정(Define environment variable)<br>For Ubuntu Desktop:<figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">echo</span> <span class="string">&#x27;export PYENV_ROOT=&quot;$HOME/.pyenv&quot;&#x27;</span> &gt;&gt; ~/.bashrc</span><br><span class="line"><span class="built_in">echo</span> <span class="string">&#x27;export PATH=&quot;$PYENV_ROOT/bin:$PATH&quot;&#x27;</span> &gt;&gt; ~/.bashrc</span><br></pre></td></tr></table></figure>For Zsh:<figure class="highlight zsh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">echo</span> <span class="string">&#x27;export PYENV_ROOT=&quot;$HOME/.pyenv&quot;&#x27;</span> &gt;&gt; ~/.zshrc</span><br><span class="line"><span class="built_in">echo</span> <span class="string">&#x27;export PATH=&quot;$PYENV_ROOT/bin:$PATH&quot;&#x27;</span> &gt;&gt; ~/.zshrc</span><br></pre></td></tr></table></figure>직접 <code>.zshrc</code>(<code>.bashrc</code>)에 들어가서 추가해줘도 된다.<figure class="highlight zsh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">vi ~/.zshrc</span><br><span class="line"></span><br><span class="line"><span class="comment"># PYENV PATH configuration</span></span><br><span class="line"><span class="built_in">export</span> PYENV_ROOT=<span class="string">&quot;<span class="variable">$HOME</span>/.pyenv&quot;</span></span><br><span class="line"><span class="built_in">export</span> PATH=<span class="string">&quot;<span class="variable">$PYENV_ROOT</span>/bin:<span class="variable">$PATH</span>&quot;</span></span><br></pre></td></tr></table></figure></li><li>Add <code>pyenv init</code> to shell<br>For Ubuntu Desktop:<figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">echo</span> -e <span class="string">&#x27;if command -v pyenv 1&gt;/dev/null 2&gt;&amp;1; then\n  eval &quot;$(pyenv init -)&quot;\nfi&#x27;</span> &gt;&gt; ~/.bashrc</span><br></pre></td></tr></table></figure>For Zsh:<figure class="highlight zsh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">echo</span> -e <span class="string">&#x27;if command -v pyenv 1&gt;/dev/null 2&gt;&amp;1; then\n  eval &quot;$(pyenv init -)&quot;\nfi&#x27;</span> &gt;&gt; ~/.zshrc</span><br></pre></td></tr></table></figure>마찬가지로 직접 <code>.zshrc</code>(<code>.bashrc</code>)에 들어가서 추가해줘도 된다.<figure class="highlight zsh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">vi ~/.zshrc</span><br><span class="line"></span><br><span class="line"><span class="comment"># PYENV PATH configuration</span></span><br><span class="line"><span class="built_in">export</span> PYENV_ROOT=<span class="string">&quot;<span class="variable">$HOME</span>/.pyenv&quot;</span></span><br><span class="line"><span class="built_in">export</span> PATH=<span class="string">&quot;<span class="variable">$PYENV_ROOT</span>/bin:<span class="variable">$PATH</span>&quot;</span></span><br><span class="line"><span class="keyword">if</span> <span class="built_in">command</span> -v pyenv 1&gt;/dev/null 2&gt;&amp;1; <span class="keyword">then</span></span><br><span class="line">  <span class="built_in">eval</span> <span class="string">&quot;<span class="subst">$(pyenv init -)</span>&quot;</span></span><br><span class="line"><span class="keyword">fi</span></span><br></pre></td></tr></table></figure></li><li>Restart shell<figure class="highlight zsh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">source</span> ~/.zshrc</span><br></pre></td></tr></table></figure></li><li>Install the Python build dependencies<br>For ubuntu:<figure class="highlight zsh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo apt-get update; sudo apt-get install --no-install-recommends make build-essential libssl-dev zlib1g-dev libbz2-dev libreadline-dev libsqlite3-dev wget curl llvm libncurses5-dev xz-utils tk-dev libxml2-dev libxmlsec1-dev libffi-dev liblzma-dev</span><br></pre></td></tr></table></figure></li></ol><h1 id="pyenv-virtualenv-Installation"><a href="#pyenv-virtualenv-Installation" class="headerlink" title="pyenv-virtualenv Installation"></a>pyenv-virtualenv Installation</h1><p><a href="https://github.com/pyenv/pyenv-virtualenv">https://github.com/pyenv/pyenv-virtualenv</a></p><ol><li>git clone<figure class="highlight zsh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git <span class="built_in">clone</span> https://github.com/pyenv/pyenv-virtualenv.git $(pyenv root)/plugins/pyenv-virtualenv</span><br></pre></td></tr></table></figure></li><li>(optional) Add <code>pyenv virtualenv-init</code> to shell<br>For Ubuntu Desktop:<figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">echo</span> <span class="string">&#x27;eval &quot;$(pyenv virtualenv-init -)&quot;&#x27;</span> &gt;&gt; ~/.bashrc</span><br></pre></td></tr></table></figure>For Zsh:<figure class="highlight zsh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">echo</span> <span class="string">&#x27;eval &quot;$(pyenv virtualenv-init -)&quot;&#x27;</span> &gt;&gt; ~/.zshrc</span><br></pre></td></tr></table></figure><figure class="highlight zsh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">vi ~/.zshrc</span><br><span class="line"></span><br><span class="line"><span class="comment"># PYENV PATH configuration</span></span><br><span class="line"><span class="built_in">export</span> PYENV_ROOT=<span class="string">&quot;<span class="variable">$HOME</span>/.pyenv&quot;</span></span><br><span class="line"><span class="built_in">export</span> PATH=<span class="string">&quot;<span class="variable">$PYENV_ROOT</span>/bin:<span class="variable">$PATH</span>&quot;</span></span><br><span class="line"><span class="keyword">if</span> <span class="built_in">command</span> -v pyenv 1&gt;/dev/null 2&gt;&amp;1; <span class="keyword">then</span></span><br><span class="line">  <span class="built_in">eval</span> <span class="string">&quot;<span class="subst">$(pyenv init -)</span>&quot;</span></span><br><span class="line"><span class="keyword">fi</span></span><br><span class="line"><span class="built_in">eval</span> <span class="string">&quot;<span class="subst">$(pyenv virtualenv-init -)</span>&quot;</span></span><br></pre></td></tr></table></figure></li><li>Restart shell<figure class="highlight zsh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">source</span> ~/.zshrc</span><br></pre></td></tr></table></figure><code>pyenv</code>와 <code>pyenv-virtualenv</code>설치가 끝나면 이제 가상환경을 만들 수 있다.<br><code>pyenv install --list</code>입력하면 설치할 수 있는 파이썬 버전을 확인 할 수 있다.<br><code>pyenv install 3.9.1</code> 실행 후 <code>pyenv versions</code>를 입력하면<figure class="highlight zsh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">* system (<span class="built_in">set</span> by /home/kjh/.pyenv/version)</span><br><span class="line">  3.9.1</span><br></pre></td></tr></table></figure>설치된 버전을 확인할 수 있다.<br>만약 <code>system</code>이 보이지 않는다면 <strong><a href="https://juhyeong-k.github.io/2021/02/15/ubuntu20-04-pyenv%EC%97%90%EC%84%9C-system%EC%9D%84-%EC%B0%BE%EC%A7%80-%EB%AA%BB%ED%95%98%EB%8A%94-%ED%98%84%EC%83%81/">pyenv에서 system을 찾지 못하는 현상</a></strong> 참고</li></ol><p>이제 설치된 파이썬 <code>3.9.1</code>버전을 가지고 <code>virtualenv</code>를 만들 수 있다.<br><code>pyenv virtualenv 3.9.1 test</code> 입력하고 <code>pyenv versions</code>를 입력하면 만들어진 가상환경을 볼 수 있다.<br>(test 대신 원하는 이름으로 작성해도 됨)</p><figure class="highlight zsh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">* system (<span class="built_in">set</span> by /home/kjh/.pyenv/version)</span><br><span class="line">  3.9.1</span><br><span class="line">  3.9.1/envs/<span class="built_in">test</span></span><br><span class="line">  <span class="built_in">test</span></span><br></pre></td></tr></table></figure><p>가상환경을 실행할 때는 <code>pyenv activate test</code>, 해제할때는 <code>pyenv deactivate test</code>입력하면 된다.</p><figure class="highlight zsh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">$ pyenv activate <span class="built_in">test</span></span><br><span class="line"></span><br><span class="line">$ pyenv versions</span><br><span class="line">    system</span><br><span class="line">    3.9.1</span><br><span class="line">    3.9.1/envs/<span class="built_in">test</span></span><br><span class="line">  * <span class="built_in">test</span> (<span class="built_in">set</span> by PYENV_VERSION environment variable)</span><br><span class="line"></span><br><span class="line">$ pyenv decativate <span class="built_in">test</span></span><br><span class="line"></span><br><span class="line">$ pyenv versions</span><br><span class="line">  * system (<span class="built_in">set</span> by /home/kjh/.pyenv/version)</span><br><span class="line">    3.9.1</span><br><span class="line">    3.9.1/envs/<span class="built_in">test</span></span><br><span class="line">    <span class="built_in">test</span></span><br></pre></td></tr></table></figure><figure class="highlight text"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line">-----------------pyenv 명령어------------------</span><br><span class="line"># 설치할 수 있는 파이썬 버전들</span><br><span class="line">$ pyenv install --list</span><br><span class="line"></span><br><span class="line"># 특정 버전 설치</span><br><span class="line">$ pyenv install &lt;version name&gt;</span><br><span class="line"></span><br><span class="line"># 특정 버전 삭제</span><br><span class="line">$ pyenv uninstall &lt;version name&gt;</span><br><span class="line"></span><br><span class="line"># 설치된 파이썬 버전들</span><br><span class="line">$ pyenv versions</span><br><span class="line">pyenv --version 와 pyenv versions는 서로 다른 명령어</span><br><span class="line"></span><br><span class="line"># 가상환경 생성하기</span><br><span class="line">$ pyenv virtualenv &lt;version&gt; &lt;가상환경 이름&gt;</span><br><span class="line"></span><br><span class="line"># 가상환경 삭제하기</span><br><span class="line">$ pyenv uninstall &lt;가상환경 이름&gt;</span><br><span class="line"></span><br><span class="line"># 가상환경 실행하기</span><br><span class="line">$ pyenv activate &lt;가상환경 이름&gt;</span><br><span class="line"></span><br><span class="line"># 가상환경 해제하기</span><br><span class="line">$ pyenv deactivate &lt;가상환경 이름&gt;</span><br></pre></td></tr></table></figure><h1 id="poetry-Installation"><a href="#poetry-Installation" class="headerlink" title="poetry Installation"></a>poetry Installation</h1><p><a href="https://python-poetry.org/docs/">https://python-poetry.org/docs/</a></p><ol><li>install<figure class="highlight zsh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">curl -sSL https://raw.githubusercontent.com/python-poetry/poetry/master/get-poetry.py | python -</span><br></pre></td></tr></table></figure></li><li>restart shell<br>티미널을 닫았다가 다시 실행</li></ol><p><code>poetry --version</code>입력해서 버전이 나오면 설치 완료</p><blockquote><blockquote><p>나는 여기서 <code>pyenv: python: command not found</code>라고 나오면서 실행이 안됐는데,<br><code>pyenv global 3.9.1</code>로 바꿔주고 실행하니 잘 나왔다.</p></blockquote></blockquote><p>아마 <strong><a href="https://juhyeong-k.github.io/2021/02/15/ubuntu20-04-pyenv%EC%97%90%EC%84%9C-system%EC%9D%84-%EC%B0%BE%EC%A7%80-%EB%AA%BB%ED%95%98%EB%8A%94-%ED%98%84%EC%83%81/">pyenv에서 system을 찾지 못하는 현상</a></strong>이 문제를 해결하지 않고 진행해서 발생했던 오류 같다.</p><p>이제 <code>poetry</code>까지 설치했으니, 가상 환경에서 패키지 파일도 편리하게 받을 수 있다.</p><p>여기서 궁금한 점이 생겼는데, 패키지 관리자(의존성 관리자) <code>pip</code>가 있는데 왜 굳이 <code>poetry</code>사용할까?<br><strong><a href="https://spoqa.github.io/2019/08/09/brand-new-python-dependency-manager-poetry.html">파이썬 의존성 관리자 Poetry 사용기</a></strong> 이 글을 참고해보면 알 수 있다.</p><ul><li><code>poetry</code> 사용<figure class="highlight text"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"># 새로운 가상환경 생성</span><br><span class="line">$ pyenv virtualenv 3.9.1 wps-391</span><br><span class="line"></span><br><span class="line"># 가상환경 실행</span><br><span class="line">$ pyenv activate wps-391</span><br><span class="line"></span><br><span class="line"># 폴더 생성</span><br><span class="line">$ mkdir poetry-practice</span><br><span class="line">$ cd poetry-practice</span><br><span class="line"></span><br><span class="line"># poetry init</span><br><span class="line">$ poetry init</span><br><span class="line"></span><br><span class="line"># pyproject.toml 파일 생성된 것 확인</span><br><span class="line">$ ls</span><br><span class="line"></span><br><span class="line"># django를 위한 패키지 설치</span><br><span class="line">$ poetry add django==1.11</span><br><span class="line">$ poetry add requests</span><br><span class="line">$ poetry add pillow</span><br><span class="line">$ poetry add beautifulsoup4</span><br><span class="line">$ poetry add --dev locust</span><br><span class="line"></span><br><span class="line"># 패키지 제거</span><br><span class="line">$ poetry remove &lt;패키지 이름&gt;</span><br></pre></td></tr></table></figure>poetry를 잠깐 써보면서 문득 이런 생각이 들었다.<blockquote><blockquote><p>만약 여러개의 프로젝트를 진행했을 때 어떤 프로젝트에 어떤 가상환경을 사용했는지 기억을 못하면 어떡하지?</p></blockquote></blockquote></li></ul><p>그런 불편함을 해결하기 위해 <code>autoenv</code>를 이용하면 문제없다고 한다.</p><h1 id="autoenv-Installation"><a href="#autoenv-Installation" class="headerlink" title="autoenv Installation"></a>autoenv Installation</h1><p><code>autoenv</code>는 <code>cd</code>명령어로 폴더 안에 진입과 동시에 <code>.env</code>파일이 있는지 확인하고,<br><code>.env</code>파일이 있다면 <code>.env</code>파일 안에 내용을 순서대로 터미널에 명령을 해준다.</p><p>즉, 프로젝트마다 어떤 환경으로 실행하는지 외울 필요 없이, 폴더에 진입하게 되면 자동으로<br>그 환경으로 만들어 줄 수 있다.</p><ul><li>installation<br>Using git:<figure class="highlight zsh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git <span class="built_in">clone</span> git://github.com/inishchith/autoenv.git ~/.autoenv</span><br></pre></td></tr></table></figure><figure class="highlight zsh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">echo</span> <span class="string">&#x27;source ~/.autoenv/activate.sh&#x27;</span> &gt;&gt; ~/.zshrc</span><br></pre></td></tr></table></figure><figure class="highlight zsh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">vi ~/.zshrc</span><br><span class="line"></span><br><span class="line"><span class="comment"># PYENV PATH configuration</span></span><br><span class="line"><span class="built_in">export</span> PYENV_ROOT=<span class="string">&quot;<span class="variable">$HOME</span>/.pyenv&quot;</span></span><br><span class="line"><span class="built_in">export</span> PATH=<span class="string">&quot;<span class="variable">$PYENV_ROOT</span>/bin:<span class="variable">$PATH</span>&quot;</span></span><br><span class="line"><span class="keyword">if</span> <span class="built_in">command</span> -v pyenv 1&gt;/dev/null 2&gt;&amp;1; <span class="keyword">then</span></span><br><span class="line">  <span class="built_in">eval</span> <span class="string">&quot;<span class="subst">$(pyenv init -)</span>&quot;</span></span><br><span class="line"><span class="keyword">fi</span></span><br><span class="line"><span class="built_in">eval</span> <span class="string">&quot;<span class="subst">$(pyenv virtualenv-init -)</span>&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># poetry실행파일의 PATH가 pyenv의 PATH보다 우선되도록 설정 / poetry설치 시 자동으로 작성됨</span></span><br><span class="line"><span class="built_in">export</span> PATH=<span class="string">&quot;<span class="variable">$HOME</span>/.poetry/bin:<span class="variable">$PATH</span>&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># autoenv configuration</span></span><br><span class="line"><span class="built_in">source</span> ~/.autoenv/activate.sh</span><br></pre></td></tr></table></figure></li><li><code>autoenv</code> 사용<br>아까 위에서 만들었던 <code>poetry-practice</code>디렉토리에 <code>autoenv</code>를 적용해보려고 한다.<br><code>poetry-practice</code>폴더 안에서 <code>touch .env</code>로 <code>.env</code>파일 생성 한 뒤에<br><code>echo &quot;pyenv activate wps-391&quot; &gt;&gt; .env</code> 혹은 <code>vi .env</code>로 들어가서<figure class="highlight zsh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># .env 파일</span></span><br><span class="line">pyenv activate wps-391</span><br></pre></td></tr></table></figure>이렇게 <code>.env</code>파일에 <code>pyenv activate wps-391</code>라고 적어놓고, <code>poetry-practice</code>폴더에 다시 들어가면<br>자동으로 <code>pyenv activate wps-391</code>명령을 실행해서 원하는 가상환경을 만들어줄 수 있다.<br>이렇게 되면 앞으로 <code>poetry-practice</code>에서 작업할 때 따로 가상환경을 실행시킬 필요가 없어진다.</li></ul><hr><p>-21.02.17 내용 추가-</p><p><code>autoenv</code>를 사용해서 폴더에 들어갈 때 자동으로 가상환경을 들어가줬지만, 폴더에서 나오고 나서<br>내가 <code>pyenv deactivate</code>해줘야 하는게 귀찮았다.<br>이럴 때 <code>pyenv deactivte</code>를 해주고 싶은 폴더에 <code>.env</code>를 만들어서 넣어줬다.<br>이제 폴더를 옮겨다니면서 <code>pyenv activate</code>, <code>pyenv deactivate</code>를 하지 않아도 된다.</p><p>근데 여기서 신경쓰이는게, 가상환경이 <code>activate</code>되어 있지 않은 상태에서 <code>deactivate</code>설정한 폴더에<br>들어가면 <code>pyenv-virtualenv: no virtualenv has been activated</code>라고 메세지가 출력된다.<br>다시 <code>.env</code>파일에 들어가서 수정해줬다.</p><figure class="highlight zsh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">if</span> [ -n <span class="string">&quot;<span class="variable">$VIRTUAL_ENV</span>&quot;</span> ] ; <span class="keyword">then</span></span><br><span class="line">        <span class="built_in">echo</span> <span class="string">&quot;virtualenv has been deactivated&quot;</span></span><br><span class="line">        pyenv deactivate</span><br><span class="line"></span><br><span class="line"><span class="keyword">fi</span></span><br></pre></td></tr></table></figure><p>이제 가상환경이 켜진 상태에서 폴더에 들어갈 때만 <code>deactivate</code>해주고 <code>virtualenv has been deactivated</code>라는 메세지를 출력한다.</p>]]></content:encoded>
      
      
      <category domain="https://juhyeong-k.github.io/categories/etc/">etc</category>
      
      
      <category domain="https://juhyeong-k.github.io/tags/etc/">etc</category>
      
      
      <comments>https://juhyeong-k.github.io/2021/02/15/pyenv-virtualenv-poetry-autoenv-%EC%84%A4%EC%B9%98-%EB%B0%A9%EB%B2%95-%EC%A0%95%EB%A6%AC/#disqus_thread</comments>
      
    </item>
    
    <item>
      <title>[Ubuntu 20.04] pyenv에서 system을 찾지 못하는 현상</title>
      <link>https://juhyeong-k.github.io/2021/02/15/ubuntu20-04-pyenv%EC%97%90%EC%84%9C-system%EC%9D%84-%EC%B0%BE%EC%A7%80-%EB%AA%BB%ED%95%98%EB%8A%94-%ED%98%84%EC%83%81/</link>
      <guid>https://juhyeong-k.github.io/2021/02/15/ubuntu20-04-pyenv%EC%97%90%EC%84%9C-system%EC%9D%84-%EC%B0%BE%EC%A7%80-%EB%AA%BB%ED%95%98%EB%8A%94-%ED%98%84%EC%83%81/</guid>
      <pubDate>Mon, 15 Feb 2021 10:58:32 GMT</pubDate>
      
        
        
      <description>&lt;h2 id=&quot;What-happened&quot;&gt;&lt;a href=&quot;#What-happened&quot; class=&quot;headerlink&quot; title=&quot;What happened?&quot;&gt;&lt;/a&gt;What happened?&lt;/h2&gt;&lt;p&gt;&lt;code&gt;pyenv versions&lt;/co</description>
        
      
      
      
      <content:encoded><![CDATA[<h2 id="What-happened"><a href="#What-happened" class="headerlink" title="What happened?"></a>What happened?</h2><p><code>pyenv versions</code>에서 <code>system</code>이 보이지 않고, <code>pyenv global system</code>으로 전역을 <code>system</code>으로 변경<br>하려고 했으나 오류 발생</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">$ pyenv versions</span><br><span class="line">* 3.9.1 (<span class="built_in">set</span> by /home/kjh/.pyenv/version)</span><br><span class="line"></span><br><span class="line">$ pyenv global system</span><br><span class="line">pyenv: system version not found <span class="keyword">in</span> PATH</span><br></pre></td></tr></table></figure><h2 id="Why-happened"><a href="#Why-happened" class="headerlink" title="Why happened?"></a>Why happened?</h2><p>Ubuntu 20.04 버전에서는 실행할 수 있는 <code>python</code>이 없다고 한다.<br><code>/usr/bin</code>에는 <code>python2</code>와 <code>python3</code>만 있고 <code>python</code>이라는 파일이 존재하지 않아서 pyenv에서<br>인식을 못한다고 한다.</p><h2 id="How-to-fixed-it"><a href="#How-to-fixed-it" class="headerlink" title="How to fixed it?"></a>How to fixed it?</h2><p>해결 방법은 <code>python</code>을 실행 가능하게 만들어주면 된다.</p><ul><li>심볼릭 링크(ln -s)<figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ ln -s /usr/bin/python3 /usr/bin/python</span><br></pre></td></tr></table></figure><code>ln</code>링크 종류는 크게 <strong>하드링크</strong>와 <strong>심볼릭 링크(소프트 링크)</strong>가 있다.<br>그 중에서 심볼릭 링크는 <code>ln -s</code>로 사용하고 원하는 파일을 다른 이름으로 불러올 수 있게 해준다.<br>윈도우의 바로가기 아이콘이라고 생각하면 쉽다.</li></ul><p>위에 명령을 실행하면 이제 <code>/usr/bin/python</code>을 찾을 때 알아서 <code>usr/bin/python3</code>를 불러오게 된다.</p><ul><li>python is python3<figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ sudo apt install python-is-python3</span><br></pre></td></tr></table></figure>위와 비슷한 기능을 패키지로 만든 것 같다.<br>파이썬을 실행할 때 <code>python</code>이 아닌 <code>python3</code>로 입력해야 실행이 가능했는데,<br>위의 패키지를 설치하면 이제 <code>python</code>으로 파이썬을 실행할 수 있게 된다.</li></ul><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">$ pyenv versions</span><br><span class="line">  system</span><br><span class="line">* 3.9.1 (<span class="built_in">set</span> by /home/kjh/.pyenv/version)</span><br><span class="line"></span><br><span class="line">$ pyenv global system</span><br><span class="line">$ pyenv versions</span><br><span class="line">* system (<span class="built_in">set</span> by /home/kjh/.pyenv/version)</span><br><span class="line">  3.9.1</span><br></pre></td></tr></table></figure><p>보이지 않던 system이 보이고 변경된 것을 확인할 수 있다.</p><h1 id="References"><a href="#References" class="headerlink" title="References"></a>References</h1><p><a href="https://github.com/pyenv/pyenv/issues/1613">https://github.com/pyenv/pyenv/issues/1613</a></p>]]></content:encoded>
      
      
      <category domain="https://juhyeong-k.github.io/categories/etc/">etc</category>
      
      
      <category domain="https://juhyeong-k.github.io/tags/etc/">etc</category>
      
      
      <comments>https://juhyeong-k.github.io/2021/02/15/ubuntu20-04-pyenv%EC%97%90%EC%84%9C-system%EC%9D%84-%EC%B0%BE%EC%A7%80-%EB%AA%BB%ED%95%98%EB%8A%94-%ED%98%84%EC%83%81/#disqus_thread</comments>
      
    </item>
    
  </channel>
</rss>
